// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: reserva.proto

package reserva

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReservaService_EnviarSolicitud_FullMethodName  = "/reserva.ReservaService/EnviarSolicitud"
	ReservaService_ProcesarReservas_FullMethodName = "/reserva.ReservaService/ProcesarReservas"
)

// ReservaServiceClient is the client API for ReservaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Cliente-Reserva
type ReservaServiceClient interface {
	EnviarSolicitud(ctx context.Context, in *SolicitudReserva, opts ...grpc.CallOption) (*ConfirmacionRecepcion, error)
	ProcesarReservas(ctx context.Context, in *ListaSolicitudes, opts ...grpc.CallOption) (*ConfirmacionRecepcion, error)
}

type reservaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReservaServiceClient(cc grpc.ClientConnInterface) ReservaServiceClient {
	return &reservaServiceClient{cc}
}

func (c *reservaServiceClient) EnviarSolicitud(ctx context.Context, in *SolicitudReserva, opts ...grpc.CallOption) (*ConfirmacionRecepcion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmacionRecepcion)
	err := c.cc.Invoke(ctx, ReservaService_EnviarSolicitud_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservaServiceClient) ProcesarReservas(ctx context.Context, in *ListaSolicitudes, opts ...grpc.CallOption) (*ConfirmacionRecepcion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmacionRecepcion)
	err := c.cc.Invoke(ctx, ReservaService_ProcesarReservas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReservaServiceServer is the server API for ReservaService service.
// All implementations must embed UnimplementedReservaServiceServer
// for forward compatibility.
//
// Cliente-Reserva
type ReservaServiceServer interface {
	EnviarSolicitud(context.Context, *SolicitudReserva) (*ConfirmacionRecepcion, error)
	ProcesarReservas(context.Context, *ListaSolicitudes) (*ConfirmacionRecepcion, error)
	mustEmbedUnimplementedReservaServiceServer()
}

// UnimplementedReservaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReservaServiceServer struct{}

func (UnimplementedReservaServiceServer) EnviarSolicitud(context.Context, *SolicitudReserva) (*ConfirmacionRecepcion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnviarSolicitud not implemented")
}
func (UnimplementedReservaServiceServer) ProcesarReservas(context.Context, *ListaSolicitudes) (*ConfirmacionRecepcion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcesarReservas not implemented")
}
func (UnimplementedReservaServiceServer) mustEmbedUnimplementedReservaServiceServer() {}
func (UnimplementedReservaServiceServer) testEmbeddedByValue()                        {}

// UnsafeReservaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReservaServiceServer will
// result in compilation errors.
type UnsafeReservaServiceServer interface {
	mustEmbedUnimplementedReservaServiceServer()
}

func RegisterReservaServiceServer(s grpc.ServiceRegistrar, srv ReservaServiceServer) {
	// If the following call pancis, it indicates UnimplementedReservaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReservaService_ServiceDesc, srv)
}

func _ReservaService_EnviarSolicitud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolicitudReserva)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservaServiceServer).EnviarSolicitud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservaService_EnviarSolicitud_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservaServiceServer).EnviarSolicitud(ctx, req.(*SolicitudReserva))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservaService_ProcesarReservas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListaSolicitudes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservaServiceServer).ProcesarReservas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservaService_ProcesarReservas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservaServiceServer).ProcesarReservas(ctx, req.(*ListaSolicitudes))
	}
	return interceptor(ctx, in, info, handler)
}

// ReservaService_ServiceDesc is the grpc.ServiceDesc for ReservaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReservaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reserva.ReservaService",
	HandlerType: (*ReservaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnviarSolicitud",
			Handler:    _ReservaService_EnviarSolicitud_Handler,
		},
		{
			MethodName: "ProcesarReservas",
			Handler:    _ReservaService_ProcesarReservas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reserva.proto",
}

const (
	RegistroService_RegistrarReserva_FullMethodName = "/reserva.RegistroService/RegistrarReserva"
)

// RegistroServiceClient is the client API for RegistroService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Reserva-Registro
type RegistroServiceClient interface {
	RegistrarReserva(ctx context.Context, in *ReservaConfirmada, opts ...grpc.CallOption) (*ConfirmacionRegistro, error)
}

type registroServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistroServiceClient(cc grpc.ClientConnInterface) RegistroServiceClient {
	return &registroServiceClient{cc}
}

func (c *registroServiceClient) RegistrarReserva(ctx context.Context, in *ReservaConfirmada, opts ...grpc.CallOption) (*ConfirmacionRegistro, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmacionRegistro)
	err := c.cc.Invoke(ctx, RegistroService_RegistrarReserva_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistroServiceServer is the server API for RegistroService service.
// All implementations must embed UnimplementedRegistroServiceServer
// for forward compatibility.
//
// Reserva-Registro
type RegistroServiceServer interface {
	RegistrarReserva(context.Context, *ReservaConfirmada) (*ConfirmacionRegistro, error)
	mustEmbedUnimplementedRegistroServiceServer()
}

// UnimplementedRegistroServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRegistroServiceServer struct{}

func (UnimplementedRegistroServiceServer) RegistrarReserva(context.Context, *ReservaConfirmada) (*ConfirmacionRegistro, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistrarReserva not implemented")
}
func (UnimplementedRegistroServiceServer) mustEmbedUnimplementedRegistroServiceServer() {}
func (UnimplementedRegistroServiceServer) testEmbeddedByValue()                         {}

// UnsafeRegistroServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistroServiceServer will
// result in compilation errors.
type UnsafeRegistroServiceServer interface {
	mustEmbedUnimplementedRegistroServiceServer()
}

func RegisterRegistroServiceServer(s grpc.ServiceRegistrar, srv RegistroServiceServer) {
	// If the following call pancis, it indicates UnimplementedRegistroServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RegistroService_ServiceDesc, srv)
}

func _RegistroService_RegistrarReserva_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReservaConfirmada)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistroServiceServer).RegistrarReserva(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistroService_RegistrarReserva_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistroServiceServer).RegistrarReserva(ctx, req.(*ReservaConfirmada))
	}
	return interceptor(ctx, in, info, handler)
}

// RegistroService_ServiceDesc is the grpc.ServiceDesc for RegistroService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegistroService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reserva.RegistroService",
	HandlerType: (*RegistroServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegistrarReserva",
			Handler:    _RegistroService_RegistrarReserva_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reserva.proto",
}
