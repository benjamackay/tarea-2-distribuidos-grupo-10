// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: monitoreo.proto

package monitoreo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MonitoreoService_ActualizarCliente_FullMethodName     = "/monitoreo.MonitoreoService/ActualizarCliente"
	MonitoreoService_StreamActualizaciones_FullMethodName = "/monitoreo.MonitoreoService/StreamActualizaciones"
)

// MonitoreoServiceClient is the client API for MonitoreoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Monitoreo y Cliente
type MonitoreoServiceClient interface {
	ActualizarCliente(ctx context.Context, in *EstadoReserva, opts ...grpc.CallOption) (*ConfirmacionCliente, error)
	StreamActualizaciones(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[EstadoReserva, ConfirmacionCliente], error)
}

type monitoreoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitoreoServiceClient(cc grpc.ClientConnInterface) MonitoreoServiceClient {
	return &monitoreoServiceClient{cc}
}

func (c *monitoreoServiceClient) ActualizarCliente(ctx context.Context, in *EstadoReserva, opts ...grpc.CallOption) (*ConfirmacionCliente, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmacionCliente)
	err := c.cc.Invoke(ctx, MonitoreoService_ActualizarCliente_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoreoServiceClient) StreamActualizaciones(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[EstadoReserva, ConfirmacionCliente], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MonitoreoService_ServiceDesc.Streams[0], MonitoreoService_StreamActualizaciones_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EstadoReserva, ConfirmacionCliente]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MonitoreoService_StreamActualizacionesClient = grpc.BidiStreamingClient[EstadoReserva, ConfirmacionCliente]

// MonitoreoServiceServer is the server API for MonitoreoService service.
// All implementations must embed UnimplementedMonitoreoServiceServer
// for forward compatibility.
//
// Monitoreo y Cliente
type MonitoreoServiceServer interface {
	ActualizarCliente(context.Context, *EstadoReserva) (*ConfirmacionCliente, error)
	StreamActualizaciones(grpc.BidiStreamingServer[EstadoReserva, ConfirmacionCliente]) error
	mustEmbedUnimplementedMonitoreoServiceServer()
}

// UnimplementedMonitoreoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMonitoreoServiceServer struct{}

func (UnimplementedMonitoreoServiceServer) ActualizarCliente(context.Context, *EstadoReserva) (*ConfirmacionCliente, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActualizarCliente not implemented")
}
func (UnimplementedMonitoreoServiceServer) StreamActualizaciones(grpc.BidiStreamingServer[EstadoReserva, ConfirmacionCliente]) error {
	return status.Errorf(codes.Unimplemented, "method StreamActualizaciones not implemented")
}
func (UnimplementedMonitoreoServiceServer) mustEmbedUnimplementedMonitoreoServiceServer() {}
func (UnimplementedMonitoreoServiceServer) testEmbeddedByValue()                          {}

// UnsafeMonitoreoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitoreoServiceServer will
// result in compilation errors.
type UnsafeMonitoreoServiceServer interface {
	mustEmbedUnimplementedMonitoreoServiceServer()
}

func RegisterMonitoreoServiceServer(s grpc.ServiceRegistrar, srv MonitoreoServiceServer) {
	// If the following call pancis, it indicates UnimplementedMonitoreoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MonitoreoService_ServiceDesc, srv)
}

func _MonitoreoService_ActualizarCliente_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstadoReserva)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoreoServiceServer).ActualizarCliente(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoreoService_ActualizarCliente_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoreoServiceServer).ActualizarCliente(ctx, req.(*EstadoReserva))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoreoService_StreamActualizaciones_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MonitoreoServiceServer).StreamActualizaciones(&grpc.GenericServerStream[EstadoReserva, ConfirmacionCliente]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MonitoreoService_StreamActualizacionesServer = grpc.BidiStreamingServer[EstadoReserva, ConfirmacionCliente]

// MonitoreoService_ServiceDesc is the grpc.ServiceDesc for MonitoreoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonitoreoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "monitoreo.MonitoreoService",
	HandlerType: (*MonitoreoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ActualizarCliente",
			Handler:    _MonitoreoService_ActualizarCliente_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamActualizaciones",
			Handler:       _MonitoreoService_StreamActualizaciones_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "monitoreo.proto",
}
